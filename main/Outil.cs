// CLASSE OUTIL
/* ============================================================================
    Les classes Outil et ses d√©riv√©es repr√©sentent les outils utilisables dans le jeu pour interagir avec les parcelles.

    La classe abstraite Outil d√©finit :
    - les propri√©t√©s communes √† tous les outils (nom, emoji, prix, messages, etc.)
    - la m√©thode abstraite Actionner(Parcelle) √† impl√©menter pour chaque outil
    - une liste statique ListeOutils contenant tous les outils disponibles

    Chaque classe d√©riv√©e de Outil (Arrosoir, Panier, Pioche, Secateur, CD, Fumier, Traitement, Coccinelle, Megaphone, Serre, IrrigationUrgence, Paillage) repr√©sente un outil sp√©cifique avec :
    - ses propres messages et effets sur la parcelle ou la plante
    - une impl√©mentation personnalis√©e de la m√©thode Actionner(Parcelle) qui applique l'effet de l'outil

    Exemples d'effets :
    - Arrosoir : augmente l'hydratation du sol
    - Panier : permet de r√©colter les plantes
    - Pioche : am√©liore le sol ou retire une plante
    - Secateur : taille la plante ou retire des nuisibles
    - CD, Coccinelle, Megaphone : repoussent ou √©liminent certains nuisibles
    - Fumier : fertilise le sol
    - Traitement : √©limine maladies ou champignons
    - Serre, Paillage : prot√®gent la plante
    - IrrigationUrgence : outil sp√©cial utilisable en cas d'urgence

    Ces classes permettent d'encapsuler la logique de chaque outil et de faciliter leur utilisation dans le jeu.
*/
public abstract class Outil : ObjetJeuAchatVente
{
    public static List<Outil> ListeOutils = new List<Outil>
    {
        new Arrosoir(),
        new Panier(),
        new Secateur(),
        new CD(),
        new Fumier(),
        new Traitement(),
        new Coccinelle(),
        new Megaphone(),
        new Serre(),
        new IrrigationUrgence(),
        new Paillage(),
        new Panier(),
        new Pioche(),
    };
    public string MessageInitial { get; set; }
    public string MessageSucces { get; protected set; }
    public string MessageEchec { get; protected set; }
    public string Verbe { get; set; }
    public bool UsageUrgence { get; set; }
    public abstract bool Actionner(Parcelle parcelle);


    protected Outil(string nom, string emoji, int decallageAffichage, int prixAchat, string verbe, string messageInitial, string messageSucces, string messageEchec, bool usageUrgence = false) : base(nom, emoji, decallageAffichage, prixAchat)
    {

        Verbe = verbe;
        UsageUrgence = usageUrgence;
        MessageInitial = messageInitial;
        MessageSucces = messageSucces;
        MessageEchec = messageEchec;
    }
}
public class Arrosoir : Outil
{
    public Arrosoir() : base("Arrosoir", "üí¶", 0, 50, "arroser", "Choisissez une parcelle √† arroser !", "Plante arros√©e !", "Vous ne pouvez pas arroser ici !") { }
    public override bool Actionner(Parcelle parcelle)
    {
        //si dessous besoineau , augmente l'hydratation de +15%
        //si au dessus besoineau , attention plante surhydrat√© et sant√© -20
        parcelle.Sol.Arroser(15);
        return true;
    }
}

public class Panier : Outil
{
    public Panier() : base("Panier", "üß∫", 0, 40, "ramasser vos r√©coltes", "Choisissez une parcelle √† r√©colter !", "R√©colte(s) ajout√©e(s) √† votre inventaire !"
, "Aucune r√©colte disponible sur cette parcelle !")
    { }
    public override bool Actionner(Parcelle parcelle)
    {

        return parcelle.PlacerRecoltesDansPanier();
    }
}
public class Pioche : Outil
{
    public Pioche() : base(
        "Pioche", "‚õèÔ∏è", 0, 90, "creuser", "Choisissez une parcelle √† travailler avec la pioche !", "Sol travaill√©, drainage am√©lior√© ou cailloux retir√©s !", "Impossible d'utiliser la pioche ici !"
    )
    { }

    public override bool Actionner(Parcelle parcelle)
    {
        // Exemple d'effet : am√©liore le drainage ou enl√®ve les cailloux
        // √Ä adapter selon ta logique de jeu
        if (parcelle.Plant.Type != "plante vide")
        {
            parcelle.DeterrerPlante();
        }
        return true;
    }
}
public class Secateur : Outil
{
    public Secateur() : base("Secateur", "ü™ì", 1, 60, "tailler", "Choisissez une parcelle √† tailler !", "Plante taill√©e avec succ√®s !", "Impossible de tailler ici !"
)
    { }
    public override bool Actionner(Parcelle parcelle)
    {
        //si prend trop de place , tailler et cases -2
        //si chenille , tailler et chenille -1
        //sinon, abime la plante et sant√© -15
        if (parcelle.Plant.Espace > 6)
        {
            parcelle.Plant.Espace -= 2;
        }
        else if (parcelle.Contient("Chenille"))
        {
            parcelle.Retirer("Chenille");
        }
        else
        {
            parcelle.Plant.Sante -= 15;
        }
        return true;
    }
}

public class CD : Outil
{
    public CD() : base("CD", "üíø", 0, 20, "installer votre CD", "Choisissez une parcelle √† prot√©ger avec un CD !", "CD install√©, les nuisibles sont repouss√©s !", "Aucun effet, les nuisibles ne sont pas concern√©s !"
    )
    { }
    public override bool Actionner(Parcelle parcelle)
    {
        //si oiseau, cd et oiseau -1
        //si chenille, cd et chenille -1
        //sinon , sert de d√©co mais inutile
        if (parcelle.Contient("Oiseau"))
        {
            parcelle.Retirer("Oiseau");
        }
        else if (parcelle.Contient("Chenille"))
        {
            parcelle.Retirer("Chenille");
        }
        parcelle.Plant.Options.Add(this);
        // sinon, d√©coration uniquement
        return true;
    }
}

public class Fumier : Outil
{
    public Fumier() : base("Fumier", "üí©", 0, 30, "mettre du fumier", "Choisissez une parcelle √† fertiliser !", "Fumier ajout√©, croissance boost√©e !", "Sol d√©j√† fertilis√© ici !"
)
    {
    }
    public override bool Actionner(Parcelle parcelle)
    {
        // la fertilit√© est remise √† son max
        parcelle.Sol.Fertilite = 10;

        return true;
    }
}

public class Traitement : Outil
{
    public Traitement() : base("Traitement", "üß™", 0, 80, "traiter", "Choisissez une parcelle √† traiter !", "Traitement appliqu√©, nuisible(s) √©limin√©(s) !", "Aucun nuisible √† traiter sur cette parcelle !"
)
    {
    }
    public override bool Actionner(Parcelle parcelle)
    {
        //si maladies , traitement => maladie-1
        //si champignon , traitement => champi-1
        //sinon , trop de chimie => sant√© -20
        if (parcelle.Contient("Maladie"))
        {
            parcelle.Retirer("Maladie");
        }
        else if (parcelle.Contient("Champignon"))
        {
            parcelle.Retirer("Champignon");
        }
        else
        {
            parcelle.Plant.Sante -= 20;
        }
        return true;
    }
}

public class Coccinelle : Outil
{
    public Coccinelle() : base("Coccinnelle", "üêû", 0, 70, "d√©poser vos coccinelles", "Choisissez une parcelle √† d√©poser des coccinelles !", "Coccinelles d√©pos√©es, les pucerons sont √©limin√©s !", "Aucun puceron √† √©liminer ici !"
)
    {
    }
    public override bool Actionner(Parcelle parcelle)
    {
        //si pucerons, coccinelle => pucerons -1
        //sinon , fait joli
        if (parcelle.Contient("Pucerons"))
        {
            parcelle.Retirer("Pucerons");
        }
        
        // sinon, jolie d√©coration
            return true;
    }
}

public class Megaphone : Outil
{
    public Megaphone() : base("M√©gaphone", "üì¢", 100, 0, "faire peur", "Choisissez une parcelle √† surveiller !", "Nuisible effray√© ou plante renforc√©e !", "Aucun effet, aucun nuisible concern√© !"
)
    {

    }
    public override bool Actionner(Parcelle parcelle)
    {
        //si oiseaux, => oiseau-1
        //si lapin, => lapin-1
        //sinon , sert de pr√©vention et sant√© =+10
        for (int i = 0; i < parcelle.Plant.NuisiblesActuels.Count; i++)
            if (parcelle.Contient("Oiseau"))
            {
                parcelle.Retirer("Oiseau");
            }
            else if (parcelle.Contient("Lapin"))
            {
                parcelle.Retirer("Lapin");
            }
            else
            {
                parcelle.Plant.Sante += 10;
            }
        return true;
    }
}
public class Serre : Outil
{ 
    public Serre() : base("Serre", "‚õ∫Ô∏è", 0, 200, "prot√©ger vos r√©coltes", "Choisissez une parcelle √† prot√©ger avec une serre !", "Serre install√©e, la plante est prot√©g√©e !", "Impossible d‚Äôinstaller une serre ici !", true
)
    { }
    public override bool Actionner(Parcelle parcelle)
    {
        if (!parcelle.Contient(this.Nom))
        {
            parcelle.Plant.Options.Add(this);
            return true;
        }
        return false;
    }
}

public class IrrigationUrgence : Outil
{
    public IrrigationUrgence() : base("Irrigation d'urgence", "üöø", 0, 120, "attention", "Choisissez une parcelle √† irriguer en urgence !", "Irrigation d'urgence effectu√©e !", "Vous ne pouvez utiliser cet objet qu'en cas d'urgence !", true
)
    { }
    public override bool Actionner(Parcelle parcelle)
    {
        return false; // outil non impl√©ment√© 
    }
}

public class Paillage : Outil
{
    public Paillage() : base("Paillage", "üçÇ", 25, 0, "attention", "Choisissez une parcelle √† pailler !", "Paillage appliqu√©, la plante est prot√©g√©e !", "Impossible de pailler ici !"
)
    { }
    public override bool Actionner(Parcelle parcelle)
    {
        //permet de limiter les maladies : A CODER
        //si trop d'eau, paille absorbe : A CODER
        if (parcelle.Sol.TauxHumidite < parcelle.Plant.BesoinEau)
        {
            // sauve les plantes mais sante -5
            parcelle.Sol.TauxHumidite = parcelle.Plant.BesoinEau;
        }
        else if (parcelle.Sol.TauxHumidite > 80)
        {
            parcelle.Sol.TauxHumidite = 75;
        }
        // on ajoute le paillage aux options de la plante
        if (!parcelle.Contient(this.Nom))
        {
            parcelle.Plant.Options.Add(this);
            return true;
        }
        return false;
    }
}
